##########
Programari
##########

Comencem amb una mica de context, amb el prefaci del llibre *The Pragmatic
Programmer: From Journeyman to Master*

    Programming is a craft. At its simplest, it comes down to getting
    a computer to do what you want it to do (or what your user wants
    it to do). As a programmer, you are part listener, part advisor,
    part interpreter, and part dictator. You try to capture elusive
    requirements and find a way of expressing them so that a mere
    machine can do them justice. You try to document your work so that
    others can understand it, and you try to engineer your work so
    that others can build on it. What's more, you try to do all this
    against the relentless ticking of the project clock. You work
    small miracles every day.

    It's a difficult job.

    There are many people offering you help. Tool vendors tout the
    miracles their products perform. Methodology gurus promise that
    their techniques guarantee results. Everyone claims that their
    programming language is the best, and every operating system is
    the answer to all conceivable ills.

    Of course, none of this is true. There are no easy answers. There
    is no such thing as a best solution, be it a tool, a language, or
    an operating system. There can only be systems that are more
    appropriate in a particular set of circumstances.

    This is where pragmatism comes in. You shouldn't be wedded to any
    particular technology, but have a broad enough background and
    experience base to allow you to choose good solutions in
    particular situations. Your background stems from an understanding
    of the basic principles of computer science, and your experience
    comes from a wide range of practical projects. Theory and practice
    combine to make you strong.

Els usem, els construïm, els modifiquem, en somiem amb nous.
L'element amb que treballem els desenvolupadors de programari és,
evidentment, el programari. Però què és exactament el programari?
Quines característiques té? Com es construeix?

En aquest tema es tracta el concepte de *programari* des de diferents
perspectives amb l'objectiu d'oferir un context de reflexió sobre el
producte de la nostra professió.

Definició formal
================

Una definició formal de llibre de text diria que el programari es
composa de:

#. Les instruccions (programes de computadora) que en executar-se
   proporcionen les característiques, funcions i grau de rendiment
   desitjats;

#. Les estructures de dades que permeten que els programes manipulin
   informació de manera adequada; y

#. Els documents que descriuen l'operació i ús dels programes.

Però, amb això sabem que és el programari?

Característiques
================

El programari presenta unes característiques molt particulars, en
destacarem aquí:

- es desenvolupa o es construeix, no es manufactura en el sentit
  clàssic

  No es treballa amb matèria (física), les despeses que ocasiona estan
  en els desenvolupadors i no tant en els materials

- no es desgasta però es deteriora

  Amb el temps, les modificacions que es realitzen per manteniment
  introdueixen més i més errors

- es construeix majoritàriament "a mida"

  * començant sempre pràcticament des de zero,

  * sense pràcticament fer servir components a diferència de la
    tendència general de la industria

Tipus
=====

El programari sovint es classifica en una o més de les següents
categories:

- programari de sistemes

  S.O., compiladors, i altres utilitats que es fan servir sovint per
  altres programes

- programari d'aplicació

  Programes que resolen una necessitat específica de negoci (ex.
  Processament de transaccions als punts de venda i el control de
  processos de manufactura en temps real com ara *just-in-time*)

- programari científic i d'enginyeria

  Caracteritzats per algorismes "devoradors de nombres" ex.
  Analitzadors de dades (astronomia, vulcanologia, tensió
  automotriu, biologia molecular…)

- programari incrustat (embedded)

  * resideix a memòria de només lectura dels sistemes

  * controlen característiques i funcions concretes per l'usuari i
    pel propi sistema ex. Control del teclat d'un forn microones,
    funcions digitals de l'automòbil (control del combustible, de
    frenada…)

- programari de línia de productes

  Ofereixen una capacitat específica valida per un gran nombre
  d'usuaris dins d'un sector concret: (ex. Productes de control
  d'inventaris, comptabilitat…) o molt genèrics (ex. Processadors
  de texts, full de càlculs, presentació, multimedia, gestió de
  bases de dades…)

- aplicacions basades en web (WebApps)

  Des d'un conjunt d'arxius en html fins a aplicacions B2B (Business
  to Business) i de comerç electrònic.

- aplicacions per dispositius mòbils (*apps*)

  * s'executen en smartphones, tablets i altres dispositius
    lleugers.

  * connectades, amb localització geogràfica, amb interaccions més
    properes a l'usuari (gestos tàctils, moviment i posició del
    dispositiu, anàlisi de audio i vídeo, etc.)

- programari d'intel·ligència artificial

  * fa servir algorismes no numèrics (ex. basats en heurístics, xarxes
    neuronals, evolutius) per a la resolució de problemes complexos que
    encara no poden ser abordats per l'anàlisi directe. Inclouen
    aplicacions per a la robòtica, els sistemes experts, el reconeixement
    de patrons (text, imatge, so), demostració de teoremes, jocs
    d'ordinador i, per descomptat, parts importants de les *apps* més
    innovadores.

Programari heretat (legacy software)
====================================

Existeixen milers de programes en funcionament de totes les tipologies

Algunes descripcions:

- Els sistemes de programari heretats van ser desenvolupats fa
  dècades, i han estat modificats de forma contínua per a complir els
  requeriments dels canvis als negocis i de les plataformes de còmput.
  La proliferació d'aquests sistemes ha causat mals de cap a les grans
  organitzacions, que els perceben com a costosos de mantenir i
  d'evolució molt arriscada

- Molts sistemes heretats donen suport a les funcions centrals de
  negoci i són indispensables per les empreses

- Es caracteritza per la seva longevitat i per ser crítics pels
  negocis

Una característica addicional en general és la poca qualitat d'aquest
programari:

- dissenys impossibles d'entendre,

- codi complicat,

- documentació escassa o inexistent,

- casos de prova i resultats que mai van ser arxivats,

- historial de canvis pobrement mantingut, …

- no s'adapta 100% a les necessitats

I, què es pot fer amb tot això?

La *regla d'or* sempre ha estat "mentre funcioni no el toquis!".

Amb el temps, però, tot programari en ús requereix canvis perquè:

- cal adaptar-lo a noves tecnologies (ex. a entorns visuals, xarxa…)

- calen nous requeriments de negoci o els requeriments han canviat

- cal que interaccioni amb nous sistemes i sgbds, …

- quan s'ha de modificar, cal que es realitzi un procés de
  reenginyeria per a garantir la seva evolució futura.

Què passa? És què els anteriors desenvolupadors no ho sabien fer?

- La crua realitat és que nosaltres estem desenvolupant el programari
  heretat de demà.

- El programari evoluciona contínuament. El programari nou es
  construeix a partir de l'antic, i tots han d'interactuar i cooperar
  amb altres.

- El nostre repte, com a desenvolupadors, és trobar mecanismes per
  desenvolupar programari de manera que interaccioni adequadament amb
  el programari heretat i, a l'hora, sigui més mantenible que aquest.

Desenvolupament
===============

Ara que ja tenim una idea més "enriquida" del què és el programari,
anem a veure com el construïm.

Per desenvolupar programari necessitem

- un procés o model de desenvolupament

  * defineix el marc de treball

  * persegueix el desenvolupament racional i a temps del programari

  * ofereix control de la gestió dels projectes de programari

  * estableix el context on s'apliquen els mètodes tècnics, es
    generen els productes (models, documents, dades, informes,
    formats)

  * assegura la qualitat

  * ofereix control de la gestió del canvi

- un conjunt de mètodes

  * són els “com” tècnics de la construcció del programari.

  * inclouen tasques com: comunicació, anàlisi de requeriments,
    modelat del disseny construcció dels programes, realització de
    proves, i  suport

- un conjunt d'eines

  * proporcionen un suport pel procés i els mètodes.

  * quan les eines estan integrades entre si, es parla d'una eina CASE
    (Computer Aided Software Engineering)

    (http://ca.wikipedia.org/wiki/Eines_CASE) Les eines CASE (Computer
    Aided Software Engineering, Enginyeria del programari Assistida
    per Ordinador) són diverses aplicacions informàtiques destinades a
    augmentar la productivitat en el desenvolupament de programari
    reduint el cost del desenvolupament en termes temps i diners.
    Aquestes eines proporcionen ajudes en totes les fases del cicle de
    vida de desenvolupament de programari com per exemple el procés de
    realitzar un disseny del projecte, calcular costos, implementació
    automàtica de codi a partir del disseny, compilació automàtica,
    documentació o detecció d'errors entre d'altres.

Activitats
==========

Els models de desenvolupament consideren les següents activitats
generals:

.. image:: _images/activitats_generals.png
   :alt: Activitats generals
   :align: center

* comunicació

  - col·laboració i comunicació amb el client

  - client (*stakeholder*) és qualsevol que tingui interès en l'èxit del
    resultat del projecte

.. sidebar:: *stakeholders*

             *stakeholder* en anglès vol dir persona que subjecta una estaca. A
             la nostra professió, aquesta estaca és gran i afilada…  si no
             cuides bé als teus clients ja saps on anirà a parar aquesta
             estaca… (acudit vist a "Ingeniería del Software, un enfoque
             Práctico" 6a ed. del Roger Pressman)

* planificació

  Descriu el pla de treball:

  - les tasques tècniques a realitzar

  - els riscos probables

  - els recursos requerits

  - els productes a generar

  - la programació de les tasques en el temps associades als recursos

* modelat

  - elaboració dels models que permeten al desenvolupador i al client
    entendre i posar-se d'acord amb els requeriments del programari a
    desenvolupar.

  - definició del disseny que satisfarà aquests requeriments

  - generalment es composa de dues accions diferenciades: anàlisi i
    disseny.

  - l'anàlisi

    Inclou investigació, elaboració, negociació, especificació i validació dels requeriments.

    Condueix a un model d'anàlisi o especificació de requeriments.

  - el disseny

    Pot ser de dades, arquitectònic, d'interfície i a nivell de components

    Crea un model de disseny o especificació de disseny.

* construcció

  - generació del producte a partir del disseny (codificació)

  - realització de les proves

* desplegat

  - lliurament al client

  - avaluació per part del client del resultat


A banda de les activitats generals, s'inclou un conjunt d'activitats
de suport. Entre d'altres:

- seguiment i suport del projecte

  Permet l'avaluació del progrés comparant-lo amb el pla del projecte

  Permet prendre mesures per a corregir les possibles desviacions

- gestió del risc

  Avalua els riscos que puguin afectar al desenvolupament o a la qualitat

- assegurament de la qualitat

  Defineix i condueix les activitats requerides per a assegurar la
  qualitat del programari

- revisions tècniques

  Avalua els productes que es van desenvolupant per a trobar i
  eliminar errors abans que arribin a la següent acció o activitat

- mesurament

  Defineix i recull mesures del procés, el projecte i el producte

  Ajuda a garantir la satisfacció dels requeriments

- gestió de la reutilització

  Defineix els criteris per a la reutilització dels productes
  (incloent components de programari)

  Estableix mecanismes per a la creació de components reusables

- preparació i producció

  Activitats requerides per a crear els productes com ara models,
  documents, registres, formats i llistes.

Existeixen diferents models de desenvolupament en ús actualment, des
de l'històric *model clàssic* o *en cascada*, a les diferents versions
de *desenvolupament àgil* (ex. eXtreme Programming, Scrum). Tots ells
persegueixen un desenvolupament controlat que satisfaga el client.

El manifest àgil
================

Els models predominants en l'actualitat, o si més no, els que a les
trobades entre desenvolupadors, queda millor dir que segueixen són alguna
variant del que es coneix com *agile*.

Com que el seu `manifest
<https://agilemanifesto.org/iso/ca/manifesto.html>`_ és prou *àgil* per
explicar, el reprodueixo aquí:

    Estem posant al descobert millors maneres de desenvolupar programari
    fent-ho i ajudant a altres a fer-ho. Mitjançant aquesta feina hem
    acabat valorant:

    - Individus i interaccions per sobre de processos i eines
    - Programari que funciona per sobre de documentació exhaustiva
    - Col·laboració amb el client per sobre de negociació de contractes
    - Resposta al canvi per sobre de cenyir-se a una planificació

    És a dir, encara que els elements de la dreta tenen valor,
    nosaltres valorem més els de l’esquerra.

El manifest està signat per un bon nombre de les figures més rellevants de
la nostra indústria, i encara que només fos per això, potser val la pena
donar-li punts de credibilitat.

|exerciseicon___| :doc:`exercici_53_01_programari`
