###############################################
|exerciseicon_ST| Exercici 32_49. Formes plenes
###############################################

.. rubric:: Context

* Carpeta de lliurament: ``32_49_formesplenes/``

* Continguts relacionats: :doc:`arrays_mutabilitat`

* Com lliurar-lo: :ref:`instruccions <instruccions_git>`

* [☆] Exercici amb :ref:`dificultat addicional<descripcio_exercicis_dificils>`

* [✓] Exercici amb :ref:`autoavaluació<descripcio_exercicis_autoavaluacio>`

.. rubric:: Enunciat

Aquest exercici és una ampliació de l'exercici :doc:`anterior
<exercici_32_48_formestaula>`.
En aquesta ocasió hi afegirem *formes plenes*. 

Què són les formes plenes? Algunes de les
formes anteriors dividien la taula en dos o més subtaules. Aquesta
activitat farà que es puguin especificar aquestes subtaules i
inicialitzar-les com a plenes.

Les noves especificacions són:

* ``*\``: primera diagonal amb primer triangle ple
* ``\*``: primera diagonal amb segon triangle ple
* ``*/``:  segona diagonal amb primer triangle ple
* ``/*``:  segona diagonal amb segon triangle ple

* ``*|``:  vertical al mig amb primer costat ple
* ``|*``:  vertical al mig amb segon costat ple
* ``*-``:  horitzontal al mig amb primer costat ple
* ``-*``:  horitzontal al mig amb segon costat ple

* ``*+``:  quarts amb quadrant nord-oest ple
* ``**+``:  quarts amb quadrant sud-oest ple
* ``+*``:  quarts amb quadrant nord-est ple
* ``+**``:  quarts amb quadrant sud-est ple
* ``*+**``:  quarts amb quadrant nord-oest i sud-est plens
* ``**+*``:  quarts amb quadrant sud-oest i nord-est plens

* ``*x``:  creu amb quadrant nord ple
* ``**x``:  creu amb quadrant oest ple
* ``x*``:  creu amb quadrant est ple
* ``x**``:  creu amb quadrant est ple
* ``*x*``:  creu amb quadrants nord i sud plens
* ``**x**``:  creu amb quadrants oest i est plens

Mòduls
------

Es requereixen els següents nous mòduls:

* ``UtilTaula.inicialitzaPrimeraDiagonalPrimerPle(boolean[][])``: per ``*\``
* ``UtilTaula.inicialitzaPrimeraDiagonalSegonPle(boolean[][])``: per ``\*``
* ``UtilTaula.inicialitzaSegonaDiagonalPrimerPle(boolean[][])``: per ``*/``
* ``UtilTaula.inicialitzaSegonaDiagonalSegonPle(boolean[][])``: per ``/*``

   Aquests quatre mòduls construeixen les diagonals amb un dels costats plens.

   Els següents exemples haurien d'ajudar-te a entendre a què em refereixo:

  .. code-block:: none

     6x6*\              6x6\*               6x6*/               6x6/*
     X·····             XXXXXX              XXXXXX              ·····X
     XX····             ·XXXXX              XXXXX·              ····XX
     XXX···             ··XXXX              XXXX··              ···XXX
     XXXX··             ···XXX              XXX···              ··XXXX
     XXXXX·             ····XX              XX····              ·XXXXX
     XXXXXX             ·····X              X·····              XXXXXX


* ``UtilTaula.inicialitzaVerticalMigPrimerPle(boolean[][])``: per ``*|``
* ``UtilTaula.inicialitzaVerticalMigSegonPle(boolean[][])``: per ``|*``
* ``UtilTaula.inicialitzaHoritzontalMigPrimerPle(boolean[][])``: per ``*-``
* ``UtilTaula.inicialitzaHoritzontalMigSegonPle(boolean[][])``: per ``-*``

   Aquests quatre mòduls construeixen els horitzontals i verticals amb un
   dels costats plens.

   Els següents exemples haurien d'ajudar-te a entendre a què em refereixo:

  .. code-block:: none

     5x5*|                   5x5|*               5x5*-               5x5-*
     XXX··                   ··XXX               XXXXX               ·····
     XXX··                   ··XXX               XXXXX               ·····
     XXX··                   ··XXX               XXXXX               XXXXX
     XXX··                   ··XXX               ·····               XXXXX
     XXX··                   ··XXX               ·····               XXXXX


* ``UtilTaula.inicialitzaQuartsNOPle(boolean[][])``: per ``*+``
* ``UtilTaula.inicialitzaQuartsSOPle(boolean[][])``: per ``**+``
* ``UtilTaula.inicialitzaQuartsNEPle(boolean[][])``: per ``+*``
* ``UtilTaula.inicialitzaQuartsSEPle(boolean[][])``: per ``+**``
* ``UtilTaula.inicialitzaQuartsNOSEPlens(boolean[][])``: per ``*+**``
* ``UtilTaula.inicialitzaQuartsSONEPlens(boolean[][])``: per ``**+*``

   Els sis mòduls anteriors permeten definir quins quadrans volem plens.

   Considera els següents exemples:

  .. code-block:: none

     7x7*+         7x7**+        7x7+*         7x7+**        7x7*+**       7x7**+*
     XXXX···       ···X···       ···XXXX       ···X···       XXXX···       ···XXXX
     XXXX···       ···X···       ···XXXX       ···X···       XXXX···       ···XXXX
     XXXX···       ···X···       ···XXXX       ···X···       XXXX···       ···XXXX
     XXXXXXX       XXXXXXX       XXXXXXX       XXXXXXX       XXXXXXX       XXXXXXX
     ···X···       XXXX···       ···X···       ···XXXX       ···XXXX       XXXX···
     ···X···       XXXX···       ···X···       ···XXXX       ···XXXX       XXXX···
     ···X···       XXXX···       ···X···       ···XXXX       ···XXXX       XXXX···


* ``UtilTaula.inicialitzaCreuNPle(boolean[][] taula)``: per ``*x``
* ``UtilTaula.inicialitzaCreuOPle(boolean[][] taula)``: per ``**x``
* ``UtilTaula.inicialitzaCreuSPle(boolean[][] taula)``: per ``x*``
* ``UtilTaula.inicialitzaCreuEPle(boolean[][] taula)``: per ``x**``
* ``UtilTaula.inicialitzaCreuNSPlens(boolean[][] taula)``: per ``*x*``
* ``UtilTaula.inicialitzaCreuOEPlens(boolean[][] taula)``: per ``**x**``

   Els sis mòduls anteriors permeten definir quines seccions de la creu volem plenes.

   Considera els següents exemples:

  .. code-block:: none

     7x7*x         7x7**x        7x7x*         7x7x**        7x7*x*        7x7**x**
     XXXXXXX       X·····X       X·····X       X·····X       XXXXXXX       X·····X
     ·XXXXX·       XX···X·       ·X···X·       ·X···XX       ·XXXXX·       XX···XX
     ··XXX··       XXX·X··       ··X·X··       ··X·XXX       ··XXX··       XXX·XXX
     ···X···       XXXX···       ···X···       ···XXXX       ···X···       XXXXXXX
     ··X·X··       XXX·X··       ··XXX··       ··X·XXX       ··XXX··       XXX·XXX
     ·X···X·       XX···X·       ·XXXXX·       ·X···XX       ·XXXXX·       XX···XX
     X·····X       X·····X       XXXXXXX       X·····X       XXXXXXX       X·····X
