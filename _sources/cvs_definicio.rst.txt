#########
Definició
#########

Un *sistema de control de versions* (*SCV*) o *Version Control System*
(*VCS*) és una aplicació que ofereix mecanismes per gestionar les
diferents versions d'un o més fitxers de manera que eviti la pèrdua de
continguts un cop enregistrat i permeti recuperar qualsevol versió un
cop enregistrada. Alguns també permeten gestionar la complexitat de
treball en grup i des de diferents equips.

Un SCV *com cal* ens haurà de permetre, entre d'altres:

* recuperar un estat anterior d'arxius concrets o de tot el projecte

* revisar els canvis realitzats al llarg del temps en arxius o grups
  d'arxius.

* recuperar arxius eliminats accidentalment

* comparar diferents versions d'un arxiu

* comprovar si una determinada modificació pot ser útil sense que la
  prova afecti la resta de l'aplicació.

* mantenir simultàniament diferents línies d'un mateix projecte: ex.
  versió de producció i nova versió.

* facilitar la fusió de diferents versions

* facilitar la integració de canvis realitzats per diferents membres
  de l'equip

* fer tot això sense afegir una sobrecàrrega excessiva, especialment als
  desenvolupadors que ja prou feina tenim!

Hi ha bàsicament dos tipus:

* els centralitzats

* els distribuïts

SCV centralitzats
=================

Un dels principals problemes a resoldre pel SCV es troba en la gestió
de versions produïdes per més d'un desenvolupador o/i en diferents
equips.

.. figure:: /_images/cvs_img002_centralitzat.png
   :alt: centralitzat
   :align: center

Aquests SCV, com ara `CVS <http://cvs.nongnu.org/>`_, `Subversion
<http://subversion.apache.org/>`_ i `Perforce
<http://www.perforce.com/>`_, disposen d'un únic servidor (el
repositori central) que conté totes les versions registrades. Els
usuaris es descarreguen la versió que els interessa del servidor als
seus equips i, quan realitzen modificacions, les envien al servidor.
L'administrador del repositori disposa normalment de moltes eines per
controlar qui pot enviar què al servidor, realitzar fusions entre
versions, etc.

Un dels problemes obvis amb aquest tipus de SCVs és la seva
dependència amb un sol punt. Què passa si el servidor deixa d'estar
disponible una estona? Doncs que durant aquest temps ningú no pot
treballar amb cap versió diferent de la que tingui al seu equip.
Encara pitjor, i si el disc del servidor es trenca? Depenem de les
còpies de seguretat que fes el servidor, donat que les còpies locals
de cadascun dels usuaris són de versions úniques i, potser,
modificades.

SCV distribuïts
===============

Alguns dels problemes dels SCV centralitzats els intenten adreçar els
SCV distribuïts.

.. figure:: /_images/cvs_img003_distribuit.png
   :alt: distribuït
   :align: center

En aquest cas, cada usuari disposa d'una còpia de **totes** les
versions registrades. El servidor "central" pot no existir o haver-ne
més d'un. En cas que n'hi hagi, es diferenciarà dels equips dels
usuaris únicament en que no tindrà espai de treball.

Exemples de SCV distribuïts són `Git <http://git-scm.com/>`_,
`Mercurial <http://mercurial.selenic.com/>`_, `Bazaar
<http://bazaar.canonical.com/en/>`_ i `Darcs <http://darcs.net/>`_.

Entre els avantatges d'aquest tipus de SCVs tenim l'evident que ja no
hi ha una dependència del servidor per a poder treballar. Si un cau,
la resta poden continuar treballant (excepte per sincronitzar amb
l'equip caigut, és clar) A més, donat que cada usuari disposa d'una
còpia amb tot el repositori de versions, la majoria de les operacions
més habituals no requereixen comunicació entre equips i, per tant, són
més ràpides. Per contra tenen el problema de l'espai ocupat pels
fitxers de totes les versions. Sovint això no representa cap problema
amb les capacitats d'emmagatzemament i compressió actuals.
