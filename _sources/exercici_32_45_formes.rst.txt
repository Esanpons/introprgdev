#########################################################
|exerciseicon__T| Exercici 32_45. Transformació de formes
#########################################################

.. rubric:: Context

* Carpeta de lliurament: ``32_45_formes/``

* Continguts relacionats: :doc:`arrays_mutabilitat`

* Com lliurar-lo: :ref:`instruccions <instruccions_git>`

* [✓] Exercici amb :ref:`autoavaluació<descripcio_exercicis_autoavaluacio>`

.. rubric:: Enunciat

En aquest exercici iniciarem el desenvolupament d'una llibreria per
manipular formes.

Com que per simplicitat, en aquest curs estem treballant en mode text,
aquestes formes estaran representades per taules de caràcters i tindran
l'aspecte d'aquelles que dibuixàvem en exercicis com el del :doc:`triangle
<exercici_31_55_triangles>`. En el cas que fossin gràfics reals, però, la
feina a fer seria molt similar ja que la taula, en comptes de caràcters,
seria de *pixels*.

Per aquest exercici, desenvoluparem la funció pura ``substitueix()`` que
rebrà una taula de N x M caràcters, i dos caràcters ``inici`` i ``fi``, i
retornarà una altra taula, de les mateixes dimensions, en la que totes les
ocurrències del caracter ``inici`` apareixeran reemplaçades per ``fi`` i
la resta de caràcters romandrà igual.

Per exemple, si la taula d'origen fos:

.. code-block:: console

   ······
   ·XXXX·
   ····X·
   ·XXXX·
   ·X····
   ·XXXX·
   ······

I la crida fos:

.. code-block:: java

    char[][] resultat = UtilFormes.substitueix(origen, 'X', '2');

El resultat seria:

.. code-block:: console

   ······
   ·2222·
   ····2·
   ·2222·
   ·2····
   ·2222·
   ······

La funció ``substitueix()`` pressuposa que la taula d'origen és
és rectangular, és a dir, totes les files tenen el mateix nombre de
columnes. A més, si les dimensions són N x M, tant N com M seran com a
mínim 1.

Per provar aquesta funció, completarem el programa següent:

.. code-block:: java
   :linenos:

    /* XXX */
    public class DigitArt {
        public static char[][] construeix1() {
            return new char[][] {
                {'·', '·', '·', '·', '·'}, 
                    {'·', 'X', 'X', '·', '·'}, 
                    {'·', '·', 'X', '·', '·'}, 
                    {'·', '·', 'X', '·', '·'}, 
                    {'·', '·', 'X', '·', '·'}, 
                    {'·', 'X', 'X', 'X', '·'}, 
                    {'·', '·', '·', '·', '·'} 
            };
        }

        public static char[][] construeix2() {
            return new char[][] {
                    {'·', '·', '·', '·', '·', '·'}, 
                    {'·', 'X', 'X', 'X', 'X', '·'}, 
                    {'·', '·', '·', '·', 'X', '·'}, 
                    {'·', 'X', 'X', 'X', 'X', '·'}, 
                    {'·', 'X', '·', '·', '·', '·'}, 
                    {'·', 'X', 'X', 'X', 'X', '·'}, 
                    {'·', '·', '·', '·', '·', '·'},
            };
        }

        public static char[][] construeix3() {
            /* XXX */
        }
        public static void mostraResultat(char[][] origen, char[][] resultat) {
            /* XXX */
        }
        public static void processaCaracter(char ch) {
            char[][] origen;
            switch (ch) {
                case '1': origen = construeix1();
                          break;
                case '2': origen = construeix2();
                          break;
                case '3': origen = construeix3();
                          break;
                default: return;    // no conec aquest caràcter
            }
            char[][] desti = UtilFormes.substitueix(origen, 'X', ch);
            mostraResultat(origen, desti);
            System.out.println();
        }
        public static void processaArgument(String arg) {
            /* XXX crida a processaCaracter() per cada caracter de arg */
        }
        public static void main(String[] args){
            // comprova que com a mínim hi hagi un argument
            /* XXX */
            // processa cada argument
            /* XXX crida a processaArgument() per cada argument */
        }
    }


Considera la següent simulació:

.. code-block:: console
    :emphasize-lines: 2-

    $ java DigitArt 1i2 i 3omés
    ····· -> ·····
    ·XX·· -> ·11··
    ··X·· -> ··1··
    ··X·· -> ··1··
    ··X·· -> ··1··
    ·XXX· -> ·111·
    ····· -> ·····

    ······ -> ······
    ·XXXX· -> ·2222·
    ····X· -> ····2·
    ·XXXX· -> ·2222·
    ·X···· -> ·2····
    ·XXXX· -> ·2222·
    ······ -> ······

    ······ -> ······
    ·XXXX· -> ·3333·
    ····X· -> ····3·
    ·XXXX· -> ·3333·
    ····X· -> ····3·
    ·XXXX· -> ·3333·
    ······ -> ······


**Nota**: els jocs de prova estan dissenyats per permetre que completis el
teu programa amb la resta dels dígits. És opcional, però si sents la
necessitat de completar el programa, tu manes!
