######
Mòduls
######

Has arribat fins aquí! Felicitats!

Ha estat un camí intens fins ara. Hem conegut assignacions,
entrada/sortida, condicionals, bucles i tenim unes primeres nocions de
bones pràctiques en la documentació dels nostres codis. Amb tot això,
teòricament podem fer **qualsevol programa**!

Atenció, però, a la paraula "teòricament". A la pràctica, la realització
d'alguns programes ens requeriria un temps molt elevat doncs els programes
esdevenen, de seguida, molt complexos.

Ens cal quelcom que ens permeti *trencar* els programes en peces
manejables. Al *què?* li direm **mòdul** i al *com?* el coneixem com
*anàlisi descendent* o *top-down*.

L'anàlisi descendent és una tècnica de resolució de problemes basada
en la descomposició del problema en subproblemes. L'anàlisi descendent
s'aplica també a aquests subproblemes fins que els subproblemes
resultants presenten una solució trivial.

Quan els problemes són de programació, cada subproblema es converteix en un mòdul.

Primer de tot, però, ens caldrà fer una mica de "bricolatge" a la nostra
instal·lació per poder realitzar les proves dels nous exercicis.
Assegura't de no perdre't la secció :doc:`moduls_junit`.

El que cal és que afegeixis junit al teu sistema i li diguis a Java on
trobar-lo.  Per simplicitat, t'he creat un nou guió que hauria de fer-te
tota la feina de que trobaràs a
``~/introprg/lib/install_junit.sh``


Un cop ja tenim el nostre sistema preparat, ja podem anar a veure com es
tradueix tot això a codi.

.. toctree::
    :titlesonly:
    :maxdepth: 1

    moduls_junit.rst
    moduls_intro.rst
    moduls_funcions.rst
    moduls_exercicis.rst
    moduls_variables.rst

.. moduls_topdown.rst
.. moduls_doc.rst
.. moduls_arrays.rst
.. moduls_mutabilitat.rst
.. moduls_recursivitat.rst
.. moduls_lambdas.rst
.. moduls_projecte.rst

